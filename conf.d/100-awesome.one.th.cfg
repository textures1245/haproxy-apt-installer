backend awesome.one.th-api
    balance roundrobin
    option httpchk GET /api/v1/health-check
    http-check expect status 200
    # http-request replace-path /api/v1/(.*) /\1
    
    # Use local0 for unified logging with domain identification
    log 127.0.0.1:514 local1 info
    
    default-server check inter 5s rise 1 fall 3

    # API servers only - round-robin load balancing
    server api1 {worker-ip-1}:30005
    server api2 {worker-ip-1}:30005
    server api3 {worker-ip-2}:30005

backend awesome.one.th
    balance roundrobin
    option httpchk GET /
    http-check expect status 200

        # Use local1 for unified logging with domain identification
    log 127.0.0.1:514 local1 info

    # Health check settings (converted from nginx check directive)
    # interval=5000 rise=1 fall=3 timeout=1000
    default-server check inter 5s rise 1 fall 3

    # Define the stick-table directly in the backend for efficient memory management
    # stick-table type string len 36 size 100k expire 20s # Uncomment ถ้าจะเปิด User session monitoring
    # stick on var(txn.session_id) # Uncomment ถ้าจะเปิด User session monitoring
    
    # Route heartbeat to metrics API (allows stick table update to complete)
    # use-server metrics-api if { path /api/heartbeat } # Uncomment ถ้าจะเปิด User session monitoring
    
    # Use existing metrics API for heartbeat responses - efficient and already available
    # This ensures stick table updates complete while providing proper HTTP response
    #server metrics-api 127.0.0.1:8405 check inter 30s fall 1 rise 1 # Uncomment ถ้าจะเปิด User session monitoring
    
    # Main application servers - round-robin load balancing
    server main1 {worker-ip-1}:30004 check
    server main2 {worker-ip-2}:30004 check
    server main3 {worker-ip-3}:30004 check