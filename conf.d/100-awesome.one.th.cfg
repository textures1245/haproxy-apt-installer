backend awesome.one.th-api
    balance roundrobin
    # http-request replace-path /api/v1/(.*) /\1
    
    # Use local0 for unified logging with domain identification
    log 127.0.0.1:514 local1 info

    # API servers only - round-robin load balancing
    server api1 {worker-ip-1}:30005 check inter 60s
    server api2 {worker-ip-1}:30005 check inter 60s
    server api3 {worker-ip-2}:30005 check inter 60s

backend awesome.one.th
    balance roundrobin

        # Use local1 for unified logging with domain identification
    log 127.0.0.1:514 local1 info

    # Define the stick-table directly in the backend for efficient memory management
    # stick-table type string len 36 size 100k expire 20s # Uncomment ถ้าจะเปิด User session monitoring
    # stick on var(txn.session_id) # Uncomment ถ้าจะเปิด User session monitoring    

    # acl is_heartbeat path /api/heartbeat # Uncomment ถ้าจะเปิด User session monitoring
    
    # Route heartbeat to metrics API ONLY
    # use-server metrics-api if is_heartbeat
    
    # Use existing metrics API for heartbeat responses - efficient and already available
    # This ensures stick table updates complete while providing proper HTTP response
    # server metrics-api 127.0.0.1:8405 check inter 60s disabled

    # Main application servers - round-robin load balancing
    server main1 {worker-ip-1}:30004 check inter 60s
    server main2 {worker-ip-2}:30004 check inter 60s
    server main3 {worker-ip-3}:30004 check inter 60s